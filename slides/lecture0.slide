# Введение в C++
Лекция 0

12 September 2024
Ильяс Адыгамов


## Шаблон минимальной программы


.code .files/lecture0/template.cpp

## Вывод строк

- Для вывода строк(и не только) используется функция `cout <<` (стрелки влево!).
- Несколько аргументов перечисляются через тот же знак `<<`.
- Для перевода строки используется слово `endl`.
- "Из коробки" работает с любым примитивным типом данных(целые числа, дробные числа, строки, символы)

.code .files/lecture0//cout.cpp

## Переменные

- В отличие от Python типизация статическая(нельзя пересоздать переменную с другим типом)
- Есть множество типов для хранения чисел

.code .files/lecture0/var.cpp

## Ввод значений

- Для ввода значений используется функция `cin >>` (стрелки вправо!).
- Несколько аргументов перечисляются через тот же знак `>>`.
- "Из коробки" работает с любым примитивным типом данных(целые числа, дробные числа, строки, символы)

.code .files/lecture0/aplusb.cpp

## Инициализация переменных

- Непроинициализированную переменную нельзя использовать в вычислениях.
- Значение такой переменной, вообще говоря, случайно.
- Такое использование приводит к undefined behaviour (неопределенному поведению, UB).

.code .files/lecture0/random_var.cpp

## Undefined behaviour

- В Python программа в случае обнаружения нестандартной ситуации будет просто падать(поведение определенно)
- В C++ есть ситуации, когда поведение программы становится неопределенным. Она продолжает работать, но ее поведение уже нельзя предсказать.
- Это одна из самых частых причин взлома ПО на C++.
- И основная причина того, что "у вас решение работает, а в тестирующей системе - нет".

## Типы данных

- `int` - целые числа, 32 бита(4 байта), значения в [-2^31, 2^31 - 1]
- `unsigned int` - неотрицательные(беззнаковые) целые числа, 32 бита(4 байта), значения в [0, 2^32 - 1]
- `long long` - целые числа, 64 бита(8 байт), значения в [-2^63, 2^63 - 1]
- `unsigned long long` - неотрицательные(беззнаковые) целые числа, 64 бита(8 байт), значения в [0, 2^64 - 1]
- `long` и `unsigned long` - иногда `int`, а иногда `long long`. Обычно не используется.

## Типы данных

- `float` - дробные числа(4 байта)
- `double` - дробные числа(8 байт, используется чаще всего)
- `long double` - дробные числа(12 или 16 байт - зависит от платформы, используется при необходимости, работает очень медленно(раза в 2 в сравнении с  `double`))

## Типы данных

Можно привести один тип к другому как в Python, написав название типа и взяв приводимое значение в скобочки:

.code .files/lecture0/convert.cpp

## Арфиметические операции

- Все так же, как и в Python, кроме
- Нет возведения в степень(функция `pow` почти никогда не используется из-за проблем с точностью)
- Только одна операция для деления - `/`. Если хотя бы один операнд является дробным числом, то деление будет дробным. Если оба операнда целые - целым.

.code .files/lecture0/div.cpp

## Арфиметические операции

Общее правило всех арифметических операций: оба операнда приводятся к типу одного из операндов. Выбирается тот тип, который шире:

- целочисленный тип всегда приводится к дробному
- беззнаковый тип к знаковому
- тип с меньшей битностью к типу с большей

## Вывод с заданной точностью

.code .files/lecture0/prec.cpp

## Целочисленное деление и остаток

Просто отбрасываем дробную часть. Отличается от математического определения!

.code .files/lecture0/intdiv.cpp

## Корень числа

.code .files/lecture0/sqrt.cpp
.html ../math.html
